/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.108
 * Generated at: 2025-08-09 17:45:47 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.sql.*;
import java.util.*;
import java.text.SimpleDateFormat;
import java.net.URLEncoder;

public final class all_005frequests_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(7);
    _jspx_imports_packages.add("java.sql");
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("java.util");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.LinkedHashSet<>(3);
    _jspx_imports_classes.add("java.net.URLEncoder");
    _jspx_imports_classes.add("java.text.SimpleDateFormat");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write('\n');
      out.write('\n');
      out.write('\n');

// --- Security Check & Session Info ---
if (session.getAttribute("userId") == null) {
    response.sendRedirect("index.html");
    return;
}
String fullName = (String) session.getAttribute("fullName");

// --- Database Connection ---
String dbUrl = "jdbc:mysql://localhost:3306/blood_bank_db?useSSL=false";
String dbUser = "root";
String dbPass = "";
Connection conn = null;

      out.write("\n");
      out.write("\n");
      out.write("<!DOCTYPE html>\n");
      out.write("<html lang=\"en\">\n");
      out.write("<head>\n");
      out.write("    <meta charset=\"UTF-8\">\n");
      out.write("    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n");
      out.write("    <title>All Open Requests - LifeFlow</title>\n");
      out.write("    <script src=\"https://cdn.tailwindcss.com\"></script>\n");
      out.write("    <link href=\"https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap\" rel=\"stylesheet\">\n");
      out.write("</head>\n");
      out.write("<body class=\"bg-gray-100 font-sans\">\n");
      out.write("    <!-- Header -->\n");
      out.write("    <header class=\"bg-white shadow-md\">\n");
      out.write("        <nav class=\"container mx-auto px-6 py-4 flex justify-between items-center\">\n");
      out.write("            <a href=\"dashboard.jsp\" class=\"text-2xl font-bold text-red-600\">LifeFlow</a>\n");
      out.write("            <div class=\"flex items-center\">\n");
      out.write("                <span class=\"text-gray-700 mr-4\">Welcome, ");
      out.print( fullName );
      out.write("!</span>\n");
      out.write("                <a href=\"dashboard.jsp\" class=\"text-sm text-blue-600 hover:underline mr-4\">Back to Dashboard</a>\n");
      out.write("                <a href=\"logout\" class=\"px-4 py-2 text-white bg-red-600 rounded-full hover:bg-red-700 text-sm\">Logout</a>\n");
      out.write("            </div>\n");
      out.write("        </nav>\n");
      out.write("    </header>\n");
      out.write("\n");
      out.write("    <!-- Main Content -->\n");
      out.write("    <main class=\"flex-grow container mx-auto p-6\">\n");
      out.write("        <div class=\"bg-white p-8 rounded-lg shadow\">\n");
      out.write("            <h1 class=\"text-3xl font-bold text-gray-800 mb-6\">All Open Blood Requests</h1>\n");
      out.write("            <div class=\"overflow-x-auto\">\n");
      out.write("                <table class=\"min-w-full bg-white\">\n");
      out.write("                    <thead class=\"bg-gray-200\">\n");
      out.write("                        <tr>\n");
      out.write("                            <th class=\"py-3 px-4 text-left text-sm font-semibold text-gray-600 uppercase\">Patient</th>\n");
      out.write("                            <th class=\"py-3 px-4 text-left text-sm font-semibold text-gray-600 uppercase\">Blood Group</th>\n");
      out.write("                            <th class=\"py-3 px-4 text-left text-sm font-semibold text-gray-600 uppercase\">Location</th>\n");
      out.write("                            <th class=\"py-3 px-4 text-left text-sm font-semibold text-gray-600 uppercase\">Contact</th>\n");
      out.write("                            <th class=\"py-3 px-4 text-left text-sm font-semibold text-gray-600 uppercase\">Action</th>\n");
      out.write("                        </tr>\n");
      out.write("                    </thead>\n");
      out.write("                    <tbody class=\"text-gray-700\">\n");
      out.write("                        ");

                            try {
                                conn = DriverManager.getConnection(dbUrl, dbUser, dbPass);
                                String allRequestsSql = "SELECT * FROM blood_requests WHERE status = 'Open' AND units_required > 0 ORDER BY request_date DESC";
                                try (PreparedStatement pstmt = conn.prepareStatement(allRequestsSql)) {
                                    ResultSet rs = pstmt.executeQuery();
                                    if (!rs.isBeforeFirst()) {
                                        out.println("<tr><td colspan='5' class='py-4 px-4 text-center text-gray-500'>No open blood requests at the moment.</td></tr>");
                                    } else {
                                        while (rs.next()) {
                                            String message = "Urgent blood needed! \n" +
                                                             "Patient: " + rs.getString("patient_name") + "\n" +
                                                             "Blood Group: " + rs.getString("required_blood_group") + "\n" +
                                                             "Hospital: " + rs.getString("hospital_name") + ", " + rs.getString("hospital_location") + "\n" +
                                                             "Contact: " + rs.getString("contact_person") + " at " + rs.getString("contact_phone") + "\n\n" +
                                                             "Shared via LifeFlow App. \n" +
                                                             "https://lifeflow.co.in";
                                            String encodedMessage = URLEncoder.encode(message, "UTF-8");
                                            String whatsappLink = "https://wa.me/?text=" + encodedMessage;
                        
      out.write("\n");
      out.write("                        <tr class=\"border-b border-gray-200\">\n");
      out.write("                            <td class=\"py-3 px-4\">");
      out.print( rs.getString("patient_name") );
      out.write("</td>\n");
      out.write("                            <td class=\"py-3 px-4\">");
      out.print( rs.getString("required_blood_group") );
      out.write("</td>\n");
      out.write("                            <td class=\"py-3 px-4\">");
      out.print( rs.getString("hospital_name") );
      out.write(',');
      out.write(' ');
      out.print( rs.getString("hospital_location") );
      out.write("</td>\n");
      out.write("                            <td class=\"py-3 px-4\">");
      out.print( rs.getString("contact_person") );
      out.write(' ');
      out.write('(');
      out.print( rs.getString("contact_phone") );
      out.write(")</td>\n");
      out.write("                            <td class=\"py-3 px-4\">\n");
      out.write("                                <a href=\"");
      out.print( whatsappLink );
      out.write("\" target=\"_blank\" class=\"inline-flex items-center bg-green-500 text-white px-3 py-1 rounded text-sm hover:bg-green-600\">\n");
      out.write("                                    <svg class=\"w-4 h-4 mr-2\" fill=\"currentColor\" viewBox=\"0 0 24 24\"><path d=\"M.057 24l1.687-6.163c-1.041-1.804-1.588-3.849-1.587-5.946.003-6.556 5.338-11.891 11.893-11.891 3.181.001 6.167 1.24 8.413 3.488 2.245 2.248 3.481 5.236 3.48 8.414-.003 6.557-5.338 11.892-11.894 11.892-1.99-.001-3.951-.5-5.688-1.448l-6.305 1.654zm6.597-3.807c1.676.995 3.276 1.591 5.392 1.592 5.448 0 9.886-4.434 9.889-9.885.002-5.462-4.415-9.89-9.881-9.892-5.452 0-9.887 4.434-9.889 9.886-.001 2.267.651 4.383 1.905 6.344l-1.225 4.485 4.62-1.212zM12 7.75c.414 0 .75.336.75.75v3.5h3.5c.414 0 .75.336.75.75s-.336.75-.75.75h-3.5v3.5c0 .414-.336.75-.75.75s-.75-.336-.75-.75v-3.5h-3.5c-.414 0-.75-.336-.75-.75s.336-.75.75-.75h3.5v-3.5c0-.414.336-.75.75.75z\"/></svg>\n");
      out.write("                                    Spread the Word\n");
      out.write("                                </a>\n");
      out.write("                            </td>\n");
      out.write("                        </tr>\n");
      out.write("                        ");

                                        }
                                    }
                                }
                            } catch (SQLException e) {
                                e.printStackTrace();
                            } finally {
                                if (conn != null) try { conn.close(); } catch (SQLException e) { e.printStackTrace(); }
                            }
                        
      out.write("\n");
      out.write("                    </tbody>\n");
      out.write("                </table>\n");
      out.write("            </div>\n");
      out.write("        </div>\n");
      out.write("    </main>\n");
      out.write("</body>\n");
      out.write("</html>\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
